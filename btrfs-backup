#!/bin/ksh
#
# Bryan Burke
# bburke@baburke.net
#
# Tool to manage initialize and transfer btrfs backups
#

export PATH="/usr/bin:/usr/sbin"

set -e
set -o braceexpand

# Flags
typeset qflag="false"

typeset _home="/var/lib/btrfs-backup"
typeset _date=$(date +"%F-%H")

typeset _config="$_home/config"

# Defaults and global variables
typeset _remote_proto="sshfs"
typeset _remote_user="$(id -u)"
typeset _remote_host=""
typeset _remote_path=""
typeset _remote_image=""
typeset _luksuuid=""
typeset _loop=""

# Flags
qflag="false"

function _msg
{
    $qflag || echo "$@"
}

function _err
{
    echo "$@" 1>&2
}

while getopts ':q' _opt; do
    case "$_opt" in
        "q")
            qflag="true"
        ;;
        "?")
            _err "Bad argument -$_opt"
            # usage
            exit 1
    esac
done

function snapshot
{
    typeset -n _conf="$1"
    typeset -n _dirs="$1[dirs]"

    # Process all local backups
    for _uuid in "${!_conf[backups][@]}"; do
        typeset -n _backup="$1[backups][$_uuid]"

        _msg "+ Processing backup id $_uuid"

        mount -o subvolid=0 UUID="${_backup[localuuid]}" "${_dirs[self]}"
        trap "umount ${_dirs[self]}" EXIT

        for _vol in "${_backup[volumes][@]}"; do
            _path="${_dirs[self]}/$_vol"

            _msg "+ Snapshotting subvolume $_vol at $_date"
            btrfs subvolume snapshot -r "$_path" "$_path-$_date" >/dev/null
        done

        trap - EXIT
        umount "${_dirs[self]}"
    done
}

function do_backup
{
    typeset _tmp="$(mktemp /tmp/btrfs-backup.XXXXXXXXXX)"
    typeset _uuid="$2"
    typeset -n _backup="$1[backups][$_uuid]"
    typeset -n _dirs="$1[dirs]"

    typeset _prev="$(ls -1d ${_dirs[backups]}/${_backup[volumes]}-~(E)[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2} | tail -n 1)"
    _prev="$(basename ${_prev} | sed -e s/^${_backup[volumes]}-//)"

    _msg "+ Found previous remote backup: $_prev"

    for d in "${_dirs[self]}/${_backup[volumes]}"-~(E)[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}; do
        _f="$(basename $d)"
        echo "${_f##${_backup[volumes]}-}"
    done > "$_tmp"

    typeset _count=0
    for d in $(<$_tmp); do
        if [[ $d > $_prev && $_count -lt 2 ]]; then
            _msg "+ Sending backups for $d"

            for v in "${_backup[volumes][@]}"; do
                btrfs send -p "${_dirs[self]}"/$v-$_prev "${_dirs[self]}"/$v-$d 2>/dev/null | btrfs receive "${_dirs[backups]}" >/dev/null
                sync
            done
            _prev=$d
            _count=$(($_count + 1))
        fi
    done

    # Check to see if we're up-to-date and local backups can be deleted
    if [[ "$_prev" == "$(tail -n 1 $_tmp)" ]]; then
        _msg "+ Removing expired local snapshots"

        _local="$(wc -l $_tmp | cut -d ' ' -f 1)"
        _todel=$(($_local - 24))

        for d in $(head -n $_todel $_tmp); do
            _msg "+ $d"

            for v in "${_backup[volumes][@]}"; do
                btrfs subvolume delete -C "${_dirs[self]}"/$v-$d >/dev/null
            done
        done
    fi
    sync

    rm -f "$_tmp"
}

function mount_remote
{
    typeset -n _conf="$1"
    typeset _uuid="$2"
    typeset _tmpdir
    typeset _dev

    _loop=$(losetup -f)

    case "$_remote_proto" in
        "sshfs")
            _msg + Mounting \
                    ${_remote_user}@${_remote_host}:${_remote_path} \
                    on ${_conf[dirs][remote]}

            sshfs "${_remote_user}@${_remote_host}:${_remote_path}" \
                    "${_conf[dirs][remote]}"

        ;;
        *)
            _err "ERROR: Unknown protocol $_remote_proto"
            return 1
        ;;
    esac

    _msg "+ Mapping $_remote_image to $_loop"
    losetup "$_loop" "${CONF[dirs][remote]}/$_remote_image"
    _dev="$_loop"

    if "${_conf[backups][$_uuid][encrypted]}"; then
        _tmpdir="$(mktemp -d /dev/shm/btrfs-backups.XXXXXXXXXX)"
        _luksuuid="$(cryptsetup luksUUID $_loop)"

        _msg "+ Reading encryption passphrase from gnome-keyring"
        secret-tool lookup tool btrfs-backup disk "$_luksuuid" > "$_tmpdir/.f"

        _msg "+ Opening $_loop as luks-$_luksuuid"
        cryptsetup -q open "$_loop" "luks-$_luksuuid" --key-file "$_tmpdir/.f"
        rm -rf "$_tmpdir"
        _dev="/dev/mapper/luks-$_luksuuid"

    fi

    _msg "+ Mounting $_dev on ${_conf[dirs][backups]}"
    mount -o compress,subvolid=0 "$_dev" "${_conf[dirs][backups]}"
}

function unmount_remote
{
    typeset -n _conf="$1"
    typeset _uuid="$2"

    _msg "+ Unmounting ${_conf[dirs][backups]}"
    umount "${_conf[dirs][backups]}"

    if "${_conf[backups][$_uuid][encrypted]}"; then
        _msg "+ Closing luks-$_luksuuid"
        cryptsetup -q close "luks-$_luksuuid"
    fi

    _msg "+ Detaching $_loop"
    losetup -d "$_loop"

    case "$_remote_proto" in
        sshfs)
            _msg "+ Removing sshfs share on ${_conf[dirs][remote]}"
            fusermount -u "${_conf[dirs][remote]}"
        ;;
        *)
            _err "ERROR: Unknown protocol? \(=$_remote_proto\)"
            return 1
        ;;
    esac
}

function extract_remote
{
    typeset -n _conf="$1"
    typeset _uuid="$2"
    typeset _uri="${_conf[backups][$_uuid][uri]}"

    if [[ "$_uri" =~ ^([a-z]+)://(.*)$ ]]; then
        _remote_proto="${.sh.match[1]}"
        _uri="${.sh.match[2]}"
    fi

    _msg "+ Setting _remote_proto to $_remote_proto"

    if [[ "$_uri" =~ ^(([a-z][a-z0-9]*)?@)?(.*)$ ]]; then
        _remote_user="${.sh.match[2]}"
        _uri="${.sh.match[3]}"
    fi

    _msg "+ Setting _remote_user to $_remote_user"

    if [[ "$_uri" =~ ^([a-zA-Z.0-9_-]+)(/.*)?/([^/]+.img)$ ]]; then
        _remote_host="${.sh.match[1]}"
        _remote_path="${.sh.match[2]}"
        _remote_image="${.sh.match[3]}"
    fi

    _msg "+ Setting _remote_host to $_remote_host"
    _msg "+ Setting _remote_path to $_remote_path"
    _msg "+ Setting _remote_image to $_remote_image"

    if [[ -z "$_remote_host" || -z "$_remote_path" || \
          -z "$_remote_image" ]]; then
        return 1
    fi

    ping -nqc 1 -W 5 "$_remote_host" >/dev/null || return 1

    return 0
}

function turn_root
{
    if [[ $(id -u) != 0 ]]; then
        _msg "+ Changing UID: $(id -u) => 0"
        sudo "$@"
        _msg "+ Exiting unprivileged shell"
        exit $?
    fi

    return 0
}

function mount_local
{
    typeset _uuid="$2"
    typeset -n _backup="$1[backups][$_uuid]"
    typeset -n _dirs="$1[dirs]"

    _msg + "Mounting ${_backup[localuuid]} on ${_dirs[self]}"
    mount -o subvolid=0 UUID="${_backup[localuuid]}" "${_dirs[self]}"

    return $?
}

function unmount_local
{
    typeset -n _dirs="$1[dirs]"

    _msg "+ Unmounting ${_dirs[self]}"
    umount "${_dirs[self]}"

    return $?
}

# Become root if not already
turn_root "$0" "$@"

# Finally, read in the configuration and setup the environment
. "$_config"
. "${CONF[dirs][run]}/dbus"
. "${CONF[dirs][run]}/keyring"
export SSH_AUTH_SOCK GNOME_KEYRING_CONTROL
export HOME="${CONF[dirs][home]}"

# Do local snapshots
snapshot "CONF"

for _uuid in "${!CONF[backups][@]}"; do
    mount_local "CONF" "$_uuid"

    if ! extract_remote "CONF" "$_uuid"; then
        _err "Failed to parse URI = ${CONF[backups][$_uuid][uri]}"
        _err "Trying next backup"
        unmount_local "CONF"
        continue
    fi

    mount_remote "CONF" "$_uuid"
    do_backup "CONF" "$_uuid"
    unmount_remote "CONF" "$_uuid"
    unmount_local "CONF"
done
