#!/bin/ksh

set -e

_config=~+/config
_dbusvar="DBUS_SESSION_BUS_ADDRESS"
_sshvar="SSH_AUTH_SOCK"
_remote_proto="sshfs"
_remote_user="$(id -u)"
_remote_host=""
_remote_path=""
_remote_image=""
_luksuuid=""
_loop=""

qflag="false"

function mount_remote
{
    typeset -n _conf="$1"
    typeset _uuid="$2"
    typeset _tmpdir
    typeset _dev

    _loop=$(losetup -f)

    case "$_remote_proto" in
        "sshfs")
            export "$_sshvar"="${_conf[env][$_sshvar]}"

            echo + Mounting \
                    ${_remote_user}@${_remote_host}:${_remote_path} \
                    on ${_conf[dirs][remote]}

            sshfs "${_remote_user}@${_remote_host}:${_remote_path}" \
                    "${_conf[dirs][remote]}"

        ;;
        *)
            echo ERROR: Unknown protocol $_remote_proto 1>&2
            return 1
        ;;
    esac

    echo + Mapping $_remote_image to $_loop
    losetup "$_loop" "${CONF[dirs][remote]}/$_remote_image"
    _dev="$_loop"

    if "${_conf[backups][$_uuid][encrypted]}"; then
        _tmpdir="$(mktemp -d /dev/shm/btrfs-backups.XXXXXXXXXX)"
        _luksuuid="$(cryptsetup luksUUID $_loop)"

        echo + Reading encryption passphrase from gnome-keyring
        sudo "$_dbusvar"="${_conf[env][$_dbusvar]}" -u "${_conf[adminuser]}" secret-tool lookup tool btrfs-backups > "$_tmpdir/.f"

        echo + Opening $_loop as luks-$_luksuuid
        cryptsetup -q open "$_loop" "luks-$_luksuuid" --key-file "$_tmpdir/.f"
        rm -rf "$_tmpdir"
        _dev="/dev/mapper/luks-$_luksuuid"

    fi

    echo + Mounting $_dev on ${_conf[dirs][backups]}
    mount -o compress,subvolid=0 "$_dev" "${_conf[dirs][backups]}"
}

function unmount_remote
{
    typeset -n _conf="$1"
    typeset _uuid="$2"

    echo + Unmounting ${_conf[dirs][backups]}
    umount "${_conf[dirs][backups]}"

    if "${_conf[backups][$_uuid][encrypted]}"; then
        echo + Closing luks-$_luksuuid
        cryptsetup -q close "luks-$_luksuuid"
    fi

    echo + Detaching $_loop
    losetup -d "$_loop"

    case "$_remote_proto" in
        sshfs)
            echo + Removing sshfs share on ${_conf[dirs][remote]}
            fusermount -u "${_conf[dirs][remote]}"
        ;;
        *)
            echo ERROR: Unknown protocol? \(=$_remote_proto\)
            return 1
        ;;
    esac
}

function extract_remote
{
    typeset -n _conf="$1"
    typeset _uuid="$2"
    typeset _uri="${_conf[backups][$_uuid][uri]}"

    if [[ "$_uri" =~ ^([a-z]+)://(.*)$ ]]; then
        _remote_proto="${.sh.match[1]}"
        _uri="${.sh.match[2]}"
    fi

    $qflag || echo "+ Setting _remote_proto to $_remote_proto"

    if [[ "$_uri" =~ ^(([a-z][a-z0-9]*)?@)?(.*)$ ]]; then
        _remote_user="${.sh.match[2]}"
        _uri="${.sh.match[3]}"
    fi

    $qflag || echo "+ Setting _remote_user to $_remote_user"

    if [[ "$_uri" =~ ^([a-zA-Z.0-9_-]+)(/.*)?/([^/]+.img)$ ]]; then
        _remote_host="${.sh.match[1]}"
        _remote_path="${.sh.match[2]}"
        _remote_image="${.sh.match[3]}"
    fi

    $qflag || echo "+ Setting _remote_host to $_remote_host"
    $qflag || echo "+ Setting _remote_path to $_remote_path"
    $qflag || echo "+ Setting _remote_image to $_remote_image"

    if [[ -z "$_remote_host" || -z "$_remote_path" || \
          -z "$_remote_image" ]]; then
        return 1
    fi

    ping -nqc 1 -W 5 "$_remote_host" >/dev/null || return 1

    return 0
}

function turn_root
{
    typeset -n _conf="$1"
    shift 1

    if [[ $(id -u) != 0 ]]; then
        $qflag || echo + Changing UID: $(id -u) =\> 0
        sudo "${_dbusvar}"="${_conf[env][$_dbusvar]}" "$@"
        $qflag || echo + Exiting unprivileged shell
        exit $?
    fi

    return 0
}

function mount_local
{
    typeset -n _conf="$1"
    typeset _uuid="$2"

    $qflag || echo + \
            Mounting ${_conf[backups][$_uuid][localuuid]} \
            on ${_conf[dirs][self]}
    mount -o subvolid=0 UUID="${_conf[backups][$_uuid][localuuid]}" "${_conf[dirs][self]}"

    return $?
}

function unmount_local
{
    typeset -n _conf="$1"

    $qflag || echo + \
            Unmounting ${_conf[dirs][self]}
    umount "${_conf[dirs][self]}"

    return $?
}

. "$_config"
turn_root "CONF" "$0" "$@"

for _uuid in "${!CONF[backups][@]}"; do
    mount_local "CONF" "$_uuid"

    if ! extract_remote "CONF" "$_uuid"; then
        echo Failed to parse URI = ${CONF[backups][$_uuid][uri]} 1>&2
        echo Trying next backup 1>&2
        unmount_local "CONF"
        continue
    fi

    mount_remote "CONF" "$_uuid"
    unmount_remote "CONF" "$_uuid"
    unmount_local "CONF"
done
